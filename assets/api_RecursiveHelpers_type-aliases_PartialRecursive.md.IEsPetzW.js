import{_ as e,c as a,o as s,V as i}from"./chunks/framework.FbKWQZfA.js";const E=JSON.parse('{"title":"PartialRecursive<Base, Shape>","description":"","frontmatter":{},"headers":[],"relativePath":"api/RecursiveHelpers/type-aliases/PartialRecursive.md","filePath":"api/RecursiveHelpers/type-aliases/PartialRecursive.md"}'),t={name:"api/RecursiveHelpers/type-aliases/PartialRecursive.md"},r=i('<p><a href="./../../">aninest</a> / <a href="./../">RecursiveHelpers</a> / PartialRecursive</p><h1 id="partialrecursive-base-shape" tabindex="-1">PartialRecursive&lt;Base, Shape&gt; <a class="header-anchor" href="#partialrecursive-base-shape" aria-label="Permalink to &quot;PartialRecursive\\&lt;Base, Shape\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">type</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> PartialRecursive</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Base</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Shape</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;: { [P in keyof Shape]?: Shape[P] extends Base ? Base : PartialRecursive&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Base</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Shape</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">[</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">P</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">]&gt; };</span></span></code></pre></div><p>Contains the same structure as the original object, but with all keys being optional.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Base</strong></p><p>• <strong>Shape</strong></p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/zphrs/aninest/blob/b669292333243ef725d764f354c403b2c4bde014/core/src/Animate/RecursiveHelpers.ts#L46" target="_blank" rel="noreferrer">Animate/RecursiveHelpers.ts:46</a></p>',9),p=[r];function l(n,h,c,o,d,k){return s(),a("div",null,p)}const g=e(t,[["render",l]]);export{E as __pageData,g as default};
