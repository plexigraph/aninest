import{_ as t,c as a,o as e,V as r}from"./chunks/framework.FbKWQZfA.js";const p=JSON.parse('{"title":"Vec2","description":"","frontmatter":{},"headers":[],"relativePath":"api/Vec2/index.md","filePath":"api/Vec2/index.md"}'),d={name:"api/Vec2/index.md"},n=r('<p><a href="./../">aninest</a> / Vec2</p><h1 id="vec2" tabindex="-1">Vec2 <a class="header-anchor" href="#vec2" aria-label="Permalink to &quot;Vec2&quot;">​</a></h1><p>A collection of 2D vector math functions and a few other generic scalar operations.</p><h2 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h2><p>Vectors are represented as <code>{x: number, y: number}</code> and are meant to be immutable, following a functional programming style.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><h3 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h3><table><thead><tr><th>Type alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./type-aliases/Vec2.html">Vec2</a></td><td>A 2D vector.</td></tr></tbody></table><h3 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h3><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><a href="./variables/ZERO_VEC2.html">ZERO_VEC2</a></td><td>A 2D vector with x and y set to 0.</td></tr></tbody></table><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./functions/addVec.html">addVec</a></td><td>-</td></tr><tr><td><a href="./functions/bezier.html">bezier</a></td><td>-</td></tr><tr><td><a href="./functions/clamp.html">clamp</a></td><td>-</td></tr><tr><td><a href="./functions/copy.html">copy</a></td><td>-</td></tr><tr><td><a href="./functions/cross.html">cross</a></td><td>-</td></tr><tr><td><a href="./functions/distanceTo.html">distanceTo</a></td><td>-</td></tr><tr><td><a href="./functions/distanceTo2.html">distanceTo2</a></td><td>-</td></tr><tr><td><a href="./functions/divScalar.html">divScalar</a></td><td>-</td></tr><tr><td><a href="./functions/divVec.html">divVec</a></td><td>-</td></tr><tr><td><a href="./functions/dot.html">dot</a></td><td>-</td></tr><tr><td><a href="./functions/lerp.html">lerp</a></td><td>-</td></tr><tr><td><a href="./functions/lerpFunc.html">lerpFunc</a></td><td>-</td></tr><tr><td><a href="./functions/mag.html">mag</a></td><td>-</td></tr><tr><td><a href="./functions/magSquared.html">magSquared</a></td><td>-</td></tr><tr><td><a href="./functions/mapVec.html">mapVec</a></td><td>-</td></tr><tr><td><a href="./functions/mulScalar.html">mulScalar</a></td><td>-</td></tr><tr><td><a href="./functions/mulVec.html">mulVec</a></td><td>-</td></tr><tr><td><a href="./functions/newVec2.html">newVec2</a></td><td>-</td></tr><tr><td><a href="./functions/normalize.html">normalize</a></td><td>-</td></tr><tr><td><a href="./functions/rotate.html">rotate</a></td><td>-</td></tr><tr><td><a href="./functions/rotateAround.html">rotateAround</a></td><td>-</td></tr><tr><td><a href="./functions/subVec.html">subVec</a></td><td>-</td></tr><tr><td><a href="./functions/vecToIter.html">vecToIter</a></td><td>-</td></tr></tbody></table>',12),o=[n];function i(c,h,s,l,f,m){return e(),a("div",null,o)}const b=t(d,[["render",i]]);export{p as __pageData,b as default};
