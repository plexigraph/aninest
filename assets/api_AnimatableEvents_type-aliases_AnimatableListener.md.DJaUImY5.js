import{_ as e,c as a,o as t,V as i}from"./chunks/framework.FbKWQZfA.js";const k=JSON.parse('{"title":"AnimatableListener<Animating, Event>","description":"","frontmatter":{},"headers":[],"relativePath":"api/AnimatableEvents/type-aliases/AnimatableListener.md","filePath":"api/AnimatableEvents/type-aliases/AnimatableListener.md"}'),n={name:"api/AnimatableEvents/type-aliases/AnimatableListener.md"},s=i('<p><a href="./../../">aninest</a> / <a href="./../">AnimatableEvents</a> / AnimatableListener</p><h1 id="animatablelistener-animating-event" tabindex="-1">AnimatableListener&lt;Animating, Event&gt; <a class="header-anchor" href="#animatablelistener-animating-event" aria-label="Permalink to &quot;AnimatableListener\\&lt;Animating, Event\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">type</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> AnimatableListener</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Event</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;: Event extends AnimatableEventsWithValue ? Listener&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Partial</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">LocalAnimatable</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;&gt;&gt; : Listener&lt;undefined&gt;;</span></span></code></pre></div><p>Listens to the animation for a specific event. All events aside from <code>update</code> return a dictionary of local values which are currently being animated.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Animating</strong> <em>extends</em> <a href="./../../AnimatableTypes/type-aliases/UnknownRecursiveAnimatable.html"><code>UnknownRecursiveAnimatable</code></a></p><p>• <strong>Event</strong> <em>extends</em> <a href="./AnimatableEvents.html"><code>AnimatableEvents</code></a></p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/zphrs/aninest/blob/faa26c191e539bfffb0686de3335249d40ae5db1/core/src/Animate/AnimatableEvents.ts#L180" target="_blank" rel="noreferrer">Animate/AnimatableEvents.ts:180</a></p>',9),l=[s];function r(h,p,d,o,m,c){return t(),a("div",null,l)}const E=e(n,[["render",r]]);export{k as __pageData,E as default};
