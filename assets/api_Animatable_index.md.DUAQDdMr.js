import{_ as t,c as e,o as a,V as n}from"./chunks/framework.BwUCzv35.js";const b=JSON.parse('{"title":"Animatable","description":"","frontmatter":{},"headers":[],"relativePath":"api/Animatable/index.md","filePath":"api/Animatable/index.md"}'),i={name:"api/Animatable/index.md"},o=n('<p><a href="./../">aninest</a> / Animatable</p><h1 id="animatable" tabindex="-1">Animatable <a class="header-anchor" href="#animatable" aria-label="Permalink to &quot;Animatable&quot;">​</a></h1><p>This module deals with creating and modifying Animations.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/getLocalInterpingToValue.html">getLocalInterpingToValue</a></td><td style="text-align:left;">Gets a value</td></tr></tbody></table><h3 id="construction" tabindex="-1">Construction <a class="header-anchor" href="#construction" aria-label="Permalink to &quot;Construction&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/createAnimation.html">createAnimation</a></td><td style="text-align:left;">Creates an animation info object, automatically inferring type from the init object.</td></tr><tr><td style="text-align:left;"><a href="./functions/createParentAnimation.html">createParentAnimation</a></td><td style="text-align:left;">Creates a parent animation from a dictionary of children which will function the same<br>as though the parent and children were created at once.</td></tr></tbody></table><h3 id="interpolation" tabindex="-1">Interpolation <a class="header-anchor" href="#interpolation" aria-label="Permalink to &quot;Interpolation&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/changeInterpFunction.html">changeInterpFunction</a></td><td style="text-align:left;">Changes the interpolation function of specific subproperties based on the mask.<br><br>Note: you only have the granularity of each dictionary level. For instance,<br>if you had the following animation structure:<br><code>const anim = createAnimation({a: {x: 0, y: 0}, b: {x: 0, y: 0}}, getLinearInterp(1))</code><br>then you could change the interpolation function of <code>a</code> and <code>b</code> but not <code>a.x</code> and <code>a.y</code>.<br>To change <code>a.x</code> seprately from <code>a.y</code>, this would be your structure:<br><code>const anim = createAnimation({a: {x: {value: 0}, y: {value: 0}}, b: {x: 0, y: 0}}, getLinearInterp(1)) // only changes</code>a.x<code>interp function changeInterpFunction(anim, getLinearInterp(2), {a: {x: true, y: false}, b: false})</code><br>Then to get the value of <code>a.x</code> you would call <code>getLocalState(anim.children.a.children.x).value</code>.<br><br>To get the <code>value</code> of both <code>x</code> and <code>y</code> and simply store set the variables <code>x</code> and <code>y</code> to the<br>respective values you could do:<br><code>const {x: {value: x}, y: {value: y}} = getStateTree(anim.children.a)</code></td></tr></tbody></table><h3 id="state-modification" tabindex="-1">State Modification <a class="header-anchor" href="#state-modification" aria-label="Permalink to &quot;State Modification&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/modifyTo.html">modifyTo</a></td><td style="text-align:left;">Sets the final stopping point of the animation.<br>The animation will start to interpolate to the new state the next<br>time <a href="./functions/updateAnimation.html">updateAnimation</a> is called.</td></tr><tr><td style="text-align:left;"><a href="./functions/updateAnimation.html">updateAnimation</a></td><td style="text-align:left;">Moves the animation forward by a certain amount of time.</td></tr></tbody></table><h3 id="state-retrieval" tabindex="-1">State Retrieval <a class="header-anchor" href="#state-retrieval" aria-label="Permalink to &quot;State Retrieval&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/getInterpingToTree.html">getInterpingToTree</a></td><td style="text-align:left;">Gets the full state tree that the animation is currently interpolating to.<br>If the animation is not headed to any state, it will return the current state.</td></tr><tr><td style="text-align:left;"><a href="./functions/getLocalInterpingTo.html">getLocalInterpingTo</a></td><td style="text-align:left;">Gets the local target state that the animation is currently headed to.<br>If the animation is not headed to any state, it will return the current state.<br>This only returns the local state of the animation, meaning only the numbers<br>in the topmost level of the animation.</td></tr><tr><td style="text-align:left;"><a href="./functions/getLocalState.html">getLocalState</a></td><td style="text-align:left;">Gets the current local state of the animation, meaning only the numbers in the topmost level of the animation.<br>To access the local state of a child, use <code>anim.children.childName</code> as the input.</td></tr><tr><td style="text-align:left;"><a href="./functions/getStateTree.html">getStateTree</a></td><td style="text-align:left;">Gets the full state of the animation, including all children.</td></tr></tbody></table>',14),l=[o];function r(d,c,h,s,f,u){return a(),e("div",null,l)}const y=t(i,[["render",r]]);export{b as __pageData,y as default};
