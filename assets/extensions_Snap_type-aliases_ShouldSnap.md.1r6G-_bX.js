import{_ as a,c as e,o as t,V as s}from"./chunks/framework.FbKWQZfA.js";const m=JSON.parse('{"title":"ShouldSnap()<Animating, Point>","description":"","frontmatter":{},"headers":[],"relativePath":"extensions/Snap/type-aliases/ShouldSnap.md","filePath":"extensions/Snap/type-aliases/ShouldSnap.md"}'),n={name:"extensions/Snap/type-aliases/ShouldSnap.md"},i=s('<p><a href="./../../">@aninest/extensions</a> / <a href="./../">Snap</a> / ShouldSnap</p><h1 id="shouldsnap-animating-point" tabindex="-1">ShouldSnap()&lt;Animating, Point&gt; <a class="header-anchor" href="#shouldsnap-animating-point" aria-label="Permalink to &quot;ShouldSnap()\\&lt;Animating, Point\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">type</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> ShouldSnap</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Point</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;: (point, currentState) </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">=</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt; </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">boolean</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">;</span></span></code></pre></div><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Animating</strong> <em>extends</em> <code>RecursiveAnimatable</code>&lt;<code>unknown</code>&gt;</p><p>• <strong>Point</strong> <em>extends</em> <code>PartialRecursiveAnimatable</code>&lt;<code>Animating</code>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>point</strong>: <code>Point</code></p><p>• <strong>currentState</strong>: <code>Animating</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>boolean</code></p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/zphrs/aninest/blob/638398f3759b1c9c8747db3d93d805b9d84d9bf5/extensions/src/snap.ts#L124" target="_blank" rel="noreferrer">../../extensions/src/snap.ts:124</a></p>',13),o=[i];function r(p,l,h,d,c,k){return t(),e("div",null,o)}const u=a(n,[["render",r]]);export{m as __pageData,u as default};
