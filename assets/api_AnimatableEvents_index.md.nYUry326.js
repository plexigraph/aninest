import{_ as e,c as t,o as a,V as n}from"./chunks/framework.FbKWQZfA.js";const b=JSON.parse('{"title":"AnimatableEvents","description":"","frontmatter":{},"headers":[],"relativePath":"api/AnimatableEvents/index.md","filePath":"api/AnimatableEvents/index.md"}'),i={name:"api/AnimatableEvents/index.md"},s=n('<p><a href="./../">aninest</a> / AnimatableEvents</p><h1 id="animatableevents" tabindex="-1">AnimatableEvents <a class="header-anchor" href="#animatableevents" aria-label="Permalink to &quot;AnimatableEvents&quot;">​</a></h1><p>Various ways to attach and detach event listeners to an Animation.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><h3 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h3><table><thead><tr><th>Type alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./type-aliases/AnimatableEvents.html">AnimatableEvents</a></td><td>The various event types that are emitted by the animation. Here are the possible events: - <strong>start</strong>: when the animation&#39;s target state is changed by calling <a href="./../Animatable/functions/modifyTo.html">modifyTo</a> and the new state is different from the current state. Returns a <a href="./../AnimatableTypes/type-aliases/LocalAnimatable.html">LocalAnimatable</a> of the new local state with only the changed values. - <strong>end</strong>: when the animation fully comes to a stop, provides the resting state Returns an <a href="./../AnimatableTypes/type-aliases/Animatable.html">Animatable</a> of the new local state with the final resting state. - <strong>beforeEnd</strong>: when the animation is about to end Useful for preventing the animation from ending to instead loop/bounce/snap etc. - <strong>interrupt</strong>: when a new <code>modifyTo</code> is called before the animation is finished Returns a <a href="./../AnimatableTypes/type-aliases/LocalAnimatable.html">LocalAnimatable</a> of the new local state with all of the currently in progress values. - <strong>update</strong>: when the current state of the animation changes, usually from a call to <a href="./../Animatable/functions/updateAnimation.html">updateAnimation</a>. Returns <code>undefined</code></td></tr><tr><td><a href="./type-aliases/AnimatableEventsWithValue.html">AnimatableEventsWithValue</a></td><td>Animation Events which return the values which the animation is interpolating to. Only excludes the <code>update</code> event.</td></tr><tr><td><a href="./type-aliases/AnimatableListener.html">AnimatableListener</a></td><td>Listens to the animation for a specific event. All events aside from <code>update</code> return a dictionary of local values which are currently being animated.</td></tr></tbody></table><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./functions/addLocalListener.html">addLocalListener</a></td><td>Adds a local listener to the animation. You can listen to the events listed in <a href="./type-aliases/AnimatableEvents.html">AnimatableEvents</a>. Animation listeners are scoped to only trigger when the current level of the animation is modified. Animation listeners are called in the order in which they were added.</td></tr><tr><td><a href="./functions/addRecursiveListener.html">addRecursiveListener</a></td><td>Adds a recursive start listener to the animation. This listener will trigger on any child modification. Animation listeners are called in the order in which they were added.</td></tr><tr><td><a href="./functions/removeLocalListener.html">removeLocalListener</a></td><td>Removes a listener from the animation</td></tr><tr><td><a href="./functions/removeRecursiveListener.html">removeRecursiveListener</a></td><td>Removes a recursive start listener from the animation</td></tr></tbody></table>',8),r=[s];function o(l,d,h,c,m,f){return a(),t("div",null,r)}const p=e(i,[["render",o]]);export{b as __pageData,p as default};
