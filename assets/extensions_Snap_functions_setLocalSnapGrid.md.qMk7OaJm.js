import{_ as a,c as e,o as s,V as t}from"./chunks/framework.FbKWQZfA.js";const m=JSON.parse('{"title":"setLocalSnapGrid()","description":"","frontmatter":{},"headers":[],"relativePath":"extensions/Snap/functions/setLocalSnapGrid.md","filePath":"extensions/Snap/functions/setLocalSnapGrid.md"}'),i={name:"extensions/Snap/functions/setLocalSnapGrid.md"},n=t('<p><a href="./../../">@aninest/extensions</a> / <a href="./../">Snap</a> / setLocalSnapGrid</p><h1 id="setlocalsnapgrid" tabindex="-1">setLocalSnapGrid() <a class="header-anchor" href="#setlocalsnapgrid" aria-label="Permalink to &quot;setLocalSnapGrid()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">function</span><span style="--shiki-light:#345348;--shiki-dark:#D9FFE8;"> setLocalSnapGrid</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;(</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">anim</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">gridSize</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">)</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> unsubscribe</span></span></code></pre></div><p>Sets a snap grid only for the top level of the animation.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Animating</strong> <em>extends</em> <code>RecursiveAnimatable</code>&lt;<code>unknown</code>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>anim</strong>: <code>Animation</code>&lt;<code>Animating</code>&gt;</p><p>• <strong>gridSize</strong>: <code>Partial</code>&lt;<code>LocalAnimatable</code>&lt;<code>Animating</code>&gt;&gt;</p><p>A dictionary of the size of each grid square for each variable. Ex: <code>{x: 1, y: 1}</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>unsubscribe</code></p><p>a function to remove the snap grid</p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/zphrs/aninest/blob/0970e35cce1ccab01b8ce4df8a59f00baff5cfda/extensions/src/snap.ts#L76" target="_blank" rel="noreferrer">../../extensions/src/snap.ts:76</a></p>',15),r=[n];function o(l,p,d,c,h,k){return s(),e("div",null,r)}const f=a(i,[["render",o]]);export{m as __pageData,f as default};
