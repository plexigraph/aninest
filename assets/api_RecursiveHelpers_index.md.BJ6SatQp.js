import{_ as e,c as t,o as a,V as s}from"./chunks/framework.BwUCzv35.js";const y=JSON.parse('{"title":"RecursiveHelpers","description":"","frontmatter":{},"headers":[],"relativePath":"api/RecursiveHelpers/index.md","filePath":"api/RecursiveHelpers/index.md"}'),r={name:"api/RecursiveHelpers/index.md"},i=s('<p><a href="./../">aninest</a> / RecursiveHelpers</p><h1 id="recursivehelpers" tabindex="-1">RecursiveHelpers <a class="header-anchor" href="#recursivehelpers" aria-label="Permalink to &quot;RecursiveHelpers&quot;">​</a></h1><p>Provides general helper functions for working with recursive objects. Especially useful for allowing extensions to mask out (not affect) certain children of an object.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><h3 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Type alias</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./type-aliases/Mask.html">Mask</a></td><td style="text-align:left;">Mask over animation. Set any key to <code>false</code> in order to mask out<br>that key and that key&#39;s subtree.</td></tr><tr><td style="text-align:left;"><a href="./type-aliases/PartialRecursive.html">PartialRecursive</a></td><td style="text-align:left;">Contains the same structure as the original object, but with all keys<br>being optional.</td></tr><tr><td style="text-align:left;"><a href="./type-aliases/Recursive.html">Recursive</a></td><td style="text-align:left;">Generic type which allows for the recursive definition of an object<br>which either has a value of type <code>Base</code> or a subtree of the same type.</td></tr></tbody></table>',6),l=[i];function o(n,c,d,h,p,u){return a(),t("div",null,l)}const _=e(r,[["render",o]]);export{y as __pageData,_ as default};
