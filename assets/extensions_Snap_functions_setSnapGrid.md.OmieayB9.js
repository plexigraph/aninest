import{_ as a,c as s,o as e,V as i}from"./chunks/framework.FbKWQZfA.js";const m=JSON.parse('{"title":"setSnapGrid()","description":"","frontmatter":{},"headers":[],"relativePath":"extensions/Snap/functions/setSnapGrid.md","filePath":"extensions/Snap/functions/setSnapGrid.md"}'),t={name:"extensions/Snap/functions/setSnapGrid.md"},n=i('<p><a href="./../../">@aninest/extensions</a> / <a href="./../">Snap</a> / setSnapGrid</p><h1 id="setsnapgrid" tabindex="-1">setSnapGrid() <a class="header-anchor" href="#setsnapgrid" aria-label="Permalink to &quot;setSnapGrid()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">function</span><span style="--shiki-light:#345348;--shiki-dark:#D9FFE8;"> setSnapGrid</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;(</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">anim</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">gridSize</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">)</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> unsubscribe</span></span></code></pre></div><p>Adds a grid to snap to.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Animating</strong> <em>extends</em> <code>RecursiveAnimatable</code>&lt;<code>unknown</code>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>anim</strong>: <code>Animation</code>&lt;<code>Animating</code>&gt;</p><p>• <strong>gridSize</strong>: <code>PartialRecursive</code>&lt;<code>number</code>, <code>Animating</code>&gt;</p><p>A dictionary of the size of each grid square for each variable. Ex: <code>{x: 1, y: 1}</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>unsubscribe</code></p><p>a function to remove the snap grid</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#345348;--shiki-dark:#D9FFE8;">setSnapGrid</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">(</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">anim</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, {x: </span><span style="--shiki-light:#413900;--shiki-dark:#CE9409;">1</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, y: </span><span style="--shiki-light:#413900;--shiki-dark:#CE9409;">1</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">}) </span><span style="--shiki-light:#6E9D87;--shiki-dark:#6E9D87;">// will snap to integer values before ending</span></span></code></pre></div><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/zphrs/aninest/blob/d10ff1271505e062a71fdb453fe27ee5103a9c80/extensions/src/snap.ts#L44" target="_blank" rel="noreferrer">../../extensions/src/snap.ts:44</a></p>',17),r=[n];function p(h,d,l,o,c,k){return e(),s("div",null,r)}const u=a(t,[["render",p]]);export{m as __pageData,u as default};
