import{_ as t,c as e,o as a,V as n}from"./chunks/framework.DrfrbPSH.js";const b=JSON.parse('{"title":"Animatable","description":"","frontmatter":{},"headers":[],"relativePath":"api/Animatable/index.md","filePath":"api/Animatable/index.md"}'),i={name:"api/Animatable/index.md"},l=n('<p><a href="./../">aninest</a> / Animatable</p><h1 id="animatable" tabindex="-1">Animatable <a class="header-anchor" href="#animatable" aria-label="Permalink to &quot;Animatable&quot;">​</a></h1><p>This module deals with creating and modifying animations.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><h3 id="bounds" tabindex="-1">Bounds <a class="header-anchor" href="#bounds" aria-label="Permalink to &quot;Bounds&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Type alias</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./type-aliases/Bounds.html">Bounds</a></td><td style="text-align:left;">The bounds of the animation. The animation will be loosely clamped to these bounds.</td></tr><tr><td style="text-align:left;"><a href="./type-aliases/PartialBounds.html">PartialBounds</a></td><td style="text-align:left;">The partial bounds of the animation, making the lower and upper bounds optional.</td></tr><tr><td style="text-align:left;"><a href="./functions/boundAnimation.html">boundAnimation</a></td><td style="text-align:left;">Modifies the bounds of an object, changing what the animation is currently interpolating to.<br>Note: you might have to call <a href="./functions/updateAnimation.html">updateAnimation</a> after this to make sure the animation is updated,<br>if the current state is outside the new bounds.<br>You can also call <a href="./functions/animationNeedsUpdate.html">animationNeedsUpdate</a> to check if the animation needs to be updated before calling <a href="./functions/updateAnimation.html">updateAnimation</a>.</td></tr></tbody></table><h3 id="construction" tabindex="-1">Construction <a class="header-anchor" href="#construction" aria-label="Permalink to &quot;Construction&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Type alias</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./type-aliases/Animation.html">Animation</a></td><td style="text-align:left;">The animation object. This is a recursive type, meaning that it can contain other animations.</td></tr><tr><td style="text-align:left;"><a href="./functions/createAnimation.html">createAnimation</a></td><td style="text-align:left;">Creates an animation info object, automatically inferring type from the init object.</td></tr></tbody></table><h3 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Type alias</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./type-aliases/AnimatableEvents.html">AnimatableEvents</a></td><td style="text-align:left;">The various event types that are emitted by the animation.<br>Here are the possible events:<br>- <strong>start</strong>: when the animation&#39;s target state is changed by calling <a href="./functions/modifyTo.html">modifyTo</a><br>and the new state is different from the current state.<br>Returns a <a href="./type-aliases/LocalAnimatable.html">PartialAnimatable</a> of the new local state with only the changed values.<br>- <strong>end</strong>: when the animation fully comes to a stop, provides the resting state<br>Returns an <a href="./type-aliases/LocalAnimatable.html">Animatable</a> of the new local state with the final resting state.<br>- <strong>bounce</strong>: when the animation bounces off a bound<br>Returns a <a href="./type-aliases/LocalAnimatable.html">PartialAnimatable</a> of the new local state with only the bounced values.<br>- <strong>interrupt</strong>: when a new <code>modifyTo</code> is called before the animation is finished<br>Returns a <a href="./type-aliases/LocalAnimatable.html">PartialAnimatable</a> of the new local state with all of the currently in progress values.<br>- <strong>update</strong>: when the animation is updated<br>Returns <code>undefined</code></td></tr><tr><td style="text-align:left;"><a href="./functions/addLocalListener.html">addLocalListener</a></td><td style="text-align:left;">Adds a local listener to the animation. You can listen to the following events:<br>- start<br>- end<br>- bounce: hitting a bound<br>- interrupt: when a new <code>modifyTo</code> is called before the animation is finished<br>Animation listeners are scoped to only trigger when the current level of the animation is modified.</td></tr><tr><td style="text-align:left;"><a href="./functions/addRecursiveListener.html">addRecursiveListener</a></td><td style="text-align:left;">Adds a recursive start listener to the animation. This listener will trigger on any child modification.</td></tr><tr><td style="text-align:left;"><a href="./functions/removeListener.html">removeListener</a></td><td style="text-align:left;">Removes a listener from the animation</td></tr><tr><td style="text-align:left;"><a href="./functions/removeRecursiveListener.html">removeRecursiveListener</a></td><td style="text-align:left;">Removes a recursive start listener from the animation</td></tr></tbody></table><h3 id="helpers" tabindex="-1">Helpers <a class="header-anchor" href="#helpers" aria-label="Permalink to &quot;Helpers&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/loopAnimation.html">loopAnimation</a></td><td style="text-align:left;">Will loop the animation, meaning that it will loop from the initial state to the target state and jump back to the initial state.</td></tr></tbody></table><h3 id="interpolation" tabindex="-1">Interpolation <a class="header-anchor" href="#interpolation" aria-label="Permalink to &quot;Interpolation&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/changeInterpFunction.html">changeInterpFunction</a></td><td style="text-align:left;">Changes the interpolation function of specific subproperties based on the mask.<br><br>Note: you only have the granularity of each dictionary level. For instance,<br>if you had the following animation structure:<br><code>const anim = createAnimation({a: {x: 0, y: 0}, b: {x: 0, y: 0}}, getLinearInterp(1))</code><br>then you could change the interpolation function of <code>a</code> and <code>b</code> but not <code>a.x</code> and <code>a.y</code>.<br>To change <code>a.x</code> seprately from <code>a.y</code>, this would be your structure:<br><code>const anim = createAnimation({a: {x: {value: 0}, y: {value: 0}}, b: {x: 0, y: 0}}, getLinearInterp(1)) // only changes</code>a.x<code>interp function changeInterpFunction(anim, getLinearInterp(2), {a: {x: true, y: false}, b: false})</code><br>Then to get the value of <code>a.x</code> you would call <code>getLocalState(anim.children.a.children.x).value</code>.<br><br>To get the <code>value</code> of both <code>x</code> and <code>y</code> and simply store set the variables <code>x</code> and <code>y</code> to the<br>respective values you could do:<br><code>const {x: {value: x}, y: {value: y}} = getStateTree(anim.children.a)</code></td></tr><tr><td style="text-align:left;"><a href="./functions/getLocalInterpingTo.html">getLocalInterpingTo</a></td><td style="text-align:left;">Gets the local target state that the animation is currently headed to.<br>If the animation is not headed to any state, it will return the current state.<br>This only returns the local state of the animation, meaning only the numbers<br>in the topmost level of the input animation.</td></tr></tbody></table><h3 id="state-modification" tabindex="-1">State Modification <a class="header-anchor" href="#state-modification" aria-label="Permalink to &quot;State Modification&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/modifyTo.html">modifyTo</a></td><td style="text-align:left;">Sets the final stopping point of the animation.<br>The animation will start to interpolate to the new state.</td></tr><tr><td style="text-align:left;"><a href="./functions/updateAnimation.html">updateAnimation</a></td><td style="text-align:left;">Moves forward in the animation by a certain amount of time.</td></tr></tbody></table><h3 id="state-retrieval" tabindex="-1">State Retrieval <a class="header-anchor" href="#state-retrieval" aria-label="Permalink to &quot;State Retrieval&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/getInterpingToTree.html">getInterpingToTree</a></td><td style="text-align:left;">Gets the total target state that the animation is currently headed to.<br>If the animation is not headed to any state, it will return the current state.</td></tr><tr><td style="text-align:left;"><a href="./functions/getLocalState.html">getLocalState</a></td><td style="text-align:left;">Gets the current local state of the animation, meaning only the numbers in the topmost level of the input animation.<br>To access the local state of a child, use <code>anim.children.childName</code> as the input.</td></tr><tr><td style="text-align:left;"><a href="./functions/getStateTree.html">getStateTree</a></td><td style="text-align:left;">Gets the total state of the animation, including all children.</td></tr></tbody></table><h3 id="state-types" tabindex="-1">State Types <a class="header-anchor" href="#state-types" aria-label="Permalink to &quot;State Types&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Type alias</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./type-aliases/Animatable.html">Animatable</a></td><td style="text-align:left;">The local state of the animation, meaning only the numbers in the topmost level of the input animation.</td></tr><tr><td style="text-align:left;"><a href="./type-aliases/LocalAnimatable.html">LocalAnimatable</a></td><td style="text-align:left;">A local slice of the Animatable type.</td></tr><tr><td style="text-align:left;"><a href="./type-aliases/PartialRecursiveAnimatable.html">PartialRecursiveAnimatable</a></td><td style="text-align:left;">A subtree of the Animatable type.</td></tr><tr><td style="text-align:left;"><a href="./type-aliases/RecursiveAnimatable.html">RecursiveAnimatable</a></td><td style="text-align:left;">The generic type of the animation state.</td></tr></tbody></table><h3 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/animationNeedsUpdate.html">animationNeedsUpdate</a></td><td style="text-align:left;">Returns whether the animation needs to be updated.</td></tr></tbody></table>',22),o=[l];function r(s,d,h,c,f,m){return a(),e("div",null,o)}const y=t(i,[["render",r]]);export{b as __pageData,y as default};
