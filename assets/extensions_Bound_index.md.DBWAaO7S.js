import{_ as e,c as t,o as a,V as n}from"./chunks/framework.FbKWQZfA.js";const b=JSON.parse('{"title":"Bound","description":"","frontmatter":{},"headers":[],"relativePath":"extensions/Bound/index.md","filePath":"extensions/Bound/index.md"}'),o={name:"extensions/Bound/index.md"},d=n('<p><a href="./../">@aninest/extensions</a> / Bound</p><h1 id="bound" tabindex="-1">Bound <a class="header-anchor" href="#bound" aria-label="Permalink to &quot;Bound&quot;">​</a></h1><p>Adds bounds to an animation to ensure an animation will end within the given bounds.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><h3 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h3><table><thead><tr><th>Type alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./type-aliases/Bounds.html">Bounds</a></td><td>The bounds of the animation, which means that all values within the bounds are optional, including the the <code>upper</code> and <code>lower</code> objects. The animation will be loosely clamped to these bounds.</td></tr><tr><td><a href="./type-aliases/BoundsLayer.html">BoundsLayer</a></td><td>A layer used to enforce minimum and maximum bounds on an animation.</td></tr></tbody></table><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./functions/setupBoundsLayer.html">setupBoundsLayer</a></td><td>Sets up a bounds layer for an animation. Allows for the animation&#39;s bounds to be dynamically changed.</td></tr></tbody></table>',8),i=[d];function s(r,h,l,u,c,m){return a(),t("div",null,i)}const _=e(o,[["render",s]]);export{b as __pageData,_ as default};
