import{_ as t,c as e,o as a,V as n}from"./chunks/framework.BwUCzv35.js";const u=JSON.parse('{"title":"AnimatableEvents","description":"","frontmatter":{},"headers":[],"relativePath":"api/AnimatableEvents/index.md","filePath":"api/AnimatableEvents/index.md"}'),i={name:"api/AnimatableEvents/index.md"},l=n('<p><a href="./../">aninest</a> / AnimatableEvents</p><h1 id="animatableevents" tabindex="-1">AnimatableEvents <a class="header-anchor" href="#animatableevents" aria-label="Permalink to &quot;AnimatableEvents&quot;">​</a></h1><p>Various ways to attach and detach event listeners to an Animation.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><h3 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Type alias</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./type-aliases/AnimatableEvents.html">AnimatableEvents</a></td><td style="text-align:left;">The various event types that are emitted by the animation.<br>Here are the possible events:<br>- <strong>start</strong>: when the animation&#39;s target state is changed by calling <a href="./../Animatable/functions/modifyTo.html">modifyTo</a><br>and the new state is different from the current state.<br>Returns a <a href="./../AnimatableTypes/type-aliases/LocalAnimatable.html">LocalAnimatable</a> of the new local state with only the changed values.<br>- <strong>end</strong>: when the animation fully comes to a stop, provides the resting state<br>Returns an <a href="./../AnimatableTypes/type-aliases/Animatable.html">Animatable</a> of the new local state with the final resting state.<br>- <strong>beforeEnd</strong>: when the animation is about to end<br>Useful for preventing the animation from ending to instead loop/bounce/snap etc.<br>- <strong>interrupt</strong>: when a new <code>modifyTo</code> is called before the animation is finished<br>Returns a <a href="./../AnimatableTypes/type-aliases/LocalAnimatable.html">LocalAnimatable</a> of the new local state with all of the currently in progress values.<br>- <strong>update</strong>: when the current state of the animation changes, usually from a call to<br><a href="./../Animatable/functions/updateAnimation.html">updateAnimation</a>.<br>Returns <code>undefined</code></td></tr><tr><td style="text-align:left;"><a href="./type-aliases/AnimatableEventsWithValue.html">AnimatableEventsWithValue</a></td><td style="text-align:left;">Animation Events which return the values which the animation is interpolating to.<br>Only excludes the <code>update</code> event.</td></tr><tr><td style="text-align:left;"><a href="./type-aliases/AnimatableListener.html">AnimatableListener</a></td><td style="text-align:left;">Listens to the animation for a specific event.<br>All events aside from <code>update</code> return a dictionary of local values which are currently being animated.</td></tr></tbody></table><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Function</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./functions/addLocalListener.html">addLocalListener</a></td><td style="text-align:left;">Adds a local listener to the animation. You can listen to the events listed in <a href="./type-aliases/AnimatableEvents.html">AnimatableEvents</a>.<br>Animation listeners are scoped to only trigger when the current level of the animation is modified.<br>Animation listeners are called in the order in which they were added.</td></tr><tr><td style="text-align:left;"><a href="./functions/addRecursiveListener.html">addRecursiveListener</a></td><td style="text-align:left;">Adds a recursive start listener to the animation. This listener will trigger on any child modification.<br>Animation listeners are called in the order in which they were added.</td></tr><tr><td style="text-align:left;"><a href="./functions/removeLocalListener.html">removeLocalListener</a></td><td style="text-align:left;">Removes a listener from the animation</td></tr><tr><td style="text-align:left;"><a href="./functions/removeRecursiveListener.html">removeRecursiveListener</a></td><td style="text-align:left;">Removes a recursive start listener from the animation</td></tr></tbody></table>',8),s=[l];function r(o,d,h,c,m,f){return a(),e("div",null,s)}const y=t(i,[["render",r]]);export{u as __pageData,y as default};
